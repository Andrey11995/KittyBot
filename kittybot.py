import logging
import os
import random
import sys
import time
from logging import StreamHandler
from typing import Tuple

import requests
import telebot
from dotenv import load_dotenv
from flask import Flask, request
from telebot import types
from telegram import Message

from congratulation import correct, image_urls, incorrect

load_dotenv()

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
handler = StreamHandler(sys.stderr)
logger.addHandler(handler)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
APP_URL = f'https://kot0bot.herokuapp.com/{TELEGRAM_TOKEN}'
CAT_API = 'https://api.thecatapi.com/v1/images/search'
DOG_API = 'https://api.thedogapi.com/v1/images/search'
SAD_CAT_URL = ('https://avatars.yandex.net/get-music-user-playlist/34120/'
               '546136583.1000.75797/m1000x1000?1546676930515&webp=false')
SAD_DOG_URL = ('https://avatars.mds.yandex.net/get-zen_doc/1898210/pub_5dcc'
               'fee9d2bc1447e8b05424_5dccff4bcd7152643c8dc951/scale_1200')
# DARYA_ID = 987237365
DARYA_ID = 632658705

bot = telebot.TeleBot(TELEGRAM_TOKEN)
server = Flask(__name__)


@server.route('/' + TELEGRAM_TOKEN, methods=['POST'])
def get_message() -> Tuple[str, int]:
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return '!', 200


@server.route('/')
def webhook() -> Tuple[str, int]:
    bot.remove_webhook()
    bot.set_webhook(url=APP_URL)
    return '!', 200


@bot.message_handler(commands=['start'])
def start(message: Message) -> None:
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    cat_button = types.InlineKeyboardButton('üê± –•–æ—á—É –ö–û–¢–ò–ö–ê üê±')
    dog_button = types.InlineKeyboardButton('üê∂ –•–æ—á—É –°–û–ë–ê–ß–ö–£ üê∂')
    how_are_you_button = types.InlineKeyboardButton('üòä –ö–∞–∫ –¥–µ–ª–∞? üòä')
    markup.add(cat_button, dog_button, how_are_you_button)
    try:
        name = message.from_user.first_name
        bot.reply_to(
            message,
            ('–ü—Ä–∏–≤–µ—Ç, {}\n\n'
             '–Ø - –ö–æ—Ç–æ–ë–æ—Ç.\n'
             '–Ø –∑–¥–µ—Å—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Ñ–æ—Ç–æ '
             '–∫–æ—Ç–∏–∫–æ–≤ –∏ —Å–æ–±–∞—á–µ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É'.format(name)),
            reply_markup=markup
        )
        bot.send_message(message.chat.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ –ª–æ–≤–∏ –ø–µ—Ä–≤–æ–≥–æ –∫–æ—Ç–∏–∫–∞!')
        bot.send_photo(message.chat.id, get_new_cat(message))
        logger.info('–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    except Exception as error:
        logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ! –û—à–∏–±–∫–∞: {error}')


@bot.message_handler(commands=['valentine'])
def congratulations(message: Message) -> None:
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    new_image = types.InlineKeyboardButton('üòç –•–æ—á—É –Ω–æ–≤—É—é –æ—Ç–∫—Ä—ã—Ç–∫—É! üòç')
    markup.add(new_image)
    congratulation = ('–ü—Ä–∏–º–∏ –æ—Ç –º–µ–Ω—è –∏ –º–æ–µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è '
                      '(–ø–æ —Å–æ–≤–º–µ—Å—Ç–∏—Ç–µ–ª—å—Å—Ç–≤—É —Ç–≤–æ–µ–≥–æ –º—É–∂–∞) '
                      '–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –î–Ω–µ–º –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞ '
                      '–∏ –∫–æ–Ω–µ—á–Ω–æ –∂–µ —Å –≤–∞—à–µ–π –≥–æ–¥–æ–≤—â–∏–Ω–æ–π! ‚ù§')
    try:
        bot.reply_to(
            message,
            '–í—ã–ø–æ–ª–Ω—è—é —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥!'
        )
        time.sleep(5)
        bot.send_message(DARYA_ID, '–î–∞—Ä—é—à–∞, –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ! üòç')
        time.sleep(3)
        bot.send_message(DARYA_ID, '–≠—Ç–æ —Ç–≤–æ–π –ö–æ—Ç–æ–±–æ—Ç üòä')
        time.sleep(6)

        bot.send_message(DARYA_ID, '–°—Ç–æ–ø, —Ç—ã –Ω–µ –î–∞—Ä—é—à–∞!')
        time.sleep(3)
        bot.send_message(DARYA_ID, ('–ì–Ω—É—Å–Ω—ã–π –ø–∏–¥–æ—Ä!!!\n'
                                    '–•–æ—Ç–µ–ª –Ω–∞–µ–±–∞—Ç—å –ö–æ—Ç–æ–±–æ—Ç–∞??!?!?!?'))
        time.sleep(2)
        bot.send_message(DARYA_ID, '–õ–∞–Ω, —Ö—É–π —Å —Ç–æ–±–æ–π!')
        time.sleep(2)

        bot.send_message(DARYA_ID, congratulation)
        time.sleep(6)
        bot.send_message(DARYA_ID, '‚ù§ –≠—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–æ—á–∫–∏ –¥–ª—è –¢–µ–±—è! ‚ù§')
        time.sleep(4)
        bot.send_photo(DARYA_ID, image_urls[0], reply_markup=markup)
        logger.info('–°–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–∫—Ä—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã')
    except Exception as error:
        logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {error}')


@bot.message_handler(content_types=['text'])
def send_message(message: Message) -> None:
    try:
        if message.text == 'üê± –•–æ—á—É –ö–û–¢–ò–ö–ê üê±':
            bot.send_photo(message.chat.id, get_new_cat(message))
            logger.info('–§–æ—Ç–æ –∫–æ—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        elif message.text == 'üê∂ –•–æ—á—É –°–û–ë–ê–ß–ö–£ üê∂':
            bot.send_photo(message.chat.id, get_new_dog(message))
            logger.info('–§–æ—Ç–æ —Å–æ–±–∞—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        elif message.text == 'üòä –ö–∞–∫ –¥–µ–ª–∞? üòä':
            markup = types.InlineKeyboardMarkup(row_width=2)
            good = types.InlineKeyboardButton(
                '–¢–æ–∂–µ –Ω–æ—Ä–º',
                callback_data='good'
            )
            bad = types.InlineKeyboardButton(
                '–ù—É, —Ç–∞–∫–æ–µ...',
                callback_data='bad'
            )
            markup.add(good, bad)
            bot.send_message(
                message.chat.id,
                '–ù–æ—Ä–º, —Ç–≤–æ–∏ –∫–∞–∫?',
                reply_markup=markup
            )
        elif message.text == 'üòç –•–æ—á—É –Ω–æ–≤—É—é –æ—Ç–∫—Ä—ã—Ç–∫—É! üòç':
            text = ['–ü–æ–∂–∞–ª—É–π—Å—Ç–∞!', '–î–µ—Ä–∂–∏!', '–≠—Ç–æ –º–æ–∂–Ω–æ!',
                    '–ó–∞–ø—Ä–æ—Å—Ç–æ!', '–ö–æ–Ω–µ—á–Ω–æ!', '–û—Ç–ø—Ä–∞–≤–ª—è—é!']
            sorry = ['–û–π, —Å–æ—Ä—è–Ω...', '–£–ø—Å...', '–ò–∑–≤–∏–Ω–∏—Ç–µ...',
                     '–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è...']
            image = random.choice(image_urls)
            if image != incorrect:
                bot.send_message(DARYA_ID, random.choice(text))
                time.sleep(2)
                bot.send_photo(DARYA_ID, image)
            else:
                bot.send_message(DARYA_ID, random.choice(text))
                time.sleep(2)
                bot.send_photo(DARYA_ID, image)
                time.sleep(2)
                bot.send_message(DARYA_ID, random.choice(sorry))
                time.sleep(2)
                bot.send_photo(DARYA_ID, correct)
            logger.info('–û—Ç–∫—Ä—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')
    except Exception as error:
        logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ! –û—à–∏–±–∫–∞: {error}')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call) -> None:
    try:
        if call.message:
            if call.data == 'good':
                text = '–ù—É –∏ –æ—Ç–ª–∏—á–Ω–æ!\n–ö–æ–≥–æ —Ç–µ–±–µ?\n–ö–æ—Ç–∏–∫–∞ –∏–ª–∏ —Å–æ–±–∞—á–∫—É?'
                bot.send_message(call.message.chat.id, text)
            elif call.data == 'bad':
                text = ('–ù–∏—á–µ–≥–æ, –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è!\n'
                        '–î–∞–≤–∞–π —Å–∫–∏–Ω—É –∫–æ—Ç–∏–∫–∞ –∏–ª–∏ —Å–æ–±–∞—á–∫—É?')
                bot.send_message(call.message.chat.id, text)
    except Exception as error:
        logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –û—à–∏–±–∫–∞: {error}')


def get_new_cat(message: Message) -> str:
    try:
        response = requests.get(CAT_API).json()
        return response[0].get('url')
    except Exception as error:
        logger.warning('API –∫–æ—Ç–∏–∫–æ–≤ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!')
        logger.error(f'–û—à–∏–±–∫–∞: {error}')
        text = ('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–µ—Ä–≤–µ—Ä –∫–æ—Ç–∏–∫–æ–≤ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω...\n'
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω—è –∫–æ—Ç–∏–∫–∞ –ø–æ–∑–¥–Ω–µ–µ')
        bot.send_message(message.chat.id, text)
        bot.send_photo(message.chat.id, requests.get(SAD_CAT_URL).content)
        logger.info('–§–æ—Ç–æ –≥—Ä—É—Å—Ç–Ω–æ–≥–æ –∫–æ—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')


def get_new_dog(message: Message) -> str:
    try:
        response = requests.get(DOG_API).json()
        return response[0].get('url')
    except Exception as error:
        logger.warning('API —Å–æ–±–∞—á–µ–∫ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!')
        logger.error(f'–û—à–∏–±–∫–∞: {error}')
        text = ('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–µ—Ä–≤–µ—Ä —Å–æ–±–∞—á–µ–∫ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω...\n'
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω—è —Å–æ–±–∞—á–∫—É –ø–æ–∑–¥–Ω–µ–µ')
        bot.send_message(message.chat.id, text)
        bot.send_photo(message.chat.id, requests.get(SAD_DOG_URL).content)
        logger.info('–§–æ—Ç–æ –≥—Ä—É—Å—Ç–Ω–æ–π —Å–æ–±–∞—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')


def main() -> None:
    try:
        logger.debug('–ö–æ—Ç–æ–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
        server.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
    except Exception as error:
        logger.critical(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {error}')


if __name__ == '__main__':
    main()
