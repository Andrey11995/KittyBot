import os
import sys
import requests
import telebot
import logging
from telebot import types
from flask import Flask, request
from logging import StreamHandler
from dotenv import load_dotenv


load_dotenv()

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
handler = StreamHandler(sys.stderr)
logger.addHandler(handler)

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
APP_URL = f'https://kot0bot.herokuapp.com/{TELEGRAM_TOKEN}'
CAT_API = 'https://api.thecatapi.com/v1/images/search'
DOG_API = 'https://api.thedogapi.com/v1/images/search'

sad_cat_url = ('https://avatars.yandex.net/get-music-user-playlist/34120/'
               '546136583.1000.75797/m1000x1000?1546676930515&webp=false')
sad_dog_url = ('https://avatars.mds.yandex.net/get-zen_doc/1898210/pub_5dcc'
               'fee9d2bc1447e8b05424_5dccff4bcd7152643c8dc951/scale_1200')

bot = telebot.TeleBot(TELEGRAM_TOKEN)
server = Flask(__name__)


@server.route('/' + TELEGRAM_TOKEN, methods=['POST'])
def get_message():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return '!', 200


@server.route('/')
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url=APP_URL)
    return '!', 200


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cat_button = types.InlineKeyboardButton('üê± –•–æ—á—É –ö–û–¢–ò–ö–ê üê±')
    dog_button = types.InlineKeyboardButton('üê∂ –•–æ—á—É –°–û–ë–ê–ß–ö–£ üê∂')
    markup.add(cat_button, dog_button)
    try:
        name = message.from_user.first_name
        bot.reply_to(
            message,
            ('–ü—Ä–∏–≤–µ—Ç, {}\n\n'
             '–Ø - –ö–æ—Ç–æ–ë–æ—Ç.\n'
             '–Ø –∑–¥–µ—Å—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Ñ–æ—Ç–æ '
             '–∫–æ—Ç–∏–∫–æ–≤ –∏ —Å–æ–±–∞—á–µ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É'.format(name)),
            reply_markup=markup
        )
        bot.send_message(message.chat.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ –ª–æ–≤–∏ –ø–µ—Ä–≤–æ–≥–æ –∫–æ—Ç–∏–∫–∞!')
        bot.send_photo(message.chat.id, get_new_cat(message))
        logger.info('–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    except Exception as error:
        logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ! –û—à–∏–±–∫–∞: {error}')


@bot.message_handler(content_types=['text'])
def new_image(message):
    try:
        if message.text == 'üê± –•–æ—á—É –ö–û–¢–ò–ö–ê üê±':
            bot.send_photo(message.chat.id, get_new_cat(message))
            logger.info('–§–æ—Ç–æ –∫–æ—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        elif message.text == 'üê∂ –•–æ—á—É –°–û–ë–ê–ß–ö–£ üê∂':
            bot.send_photo(message.chat.id, get_new_dog(message))
            logger.info('–§–æ—Ç–æ —Å–æ–±–∞—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    except Exception as error:
        logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ! –û—à–∏–±–∫–∞: {error}')


def get_new_cat(message):
    try:
        response = requests.get(CAT_API).json()
        random_image = response[0].get('url')
        return random_image
    except Exception as error:
        logger.warning('API –∫–æ—Ç–∏–∫–æ–≤ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!')
        logger.error(f'–û—à–∏–±–∫–∞: {error}')
        text = ('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–µ—Ä–≤–µ—Ä –∫–æ—Ç–∏–∫–æ–≤ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω...\n'
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω—è –∫–æ—Ç–∏–∫–∞ –ø–æ–∑–¥–Ω–µ–µ')
        bot.send_message(message.chat.id, text)
        bot.send_photo(message.chat.id, requests.get(sad_cat_url).content)
        logger.info('–§–æ—Ç–æ –≥—Ä—É—Å—Ç–Ω–æ–≥–æ –∫–æ—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')


def get_new_dog(message):
    try:
        response = requests.get(DOG_API).json()
        random_image = response[0].get('url')
        return random_image
    except Exception as error:
        logger.warning('API —Å–æ–±–∞—á–µ–∫ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!')
        logger.error(f'–û—à–∏–±–∫–∞: {error}')
        text = ('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å–µ—Ä–≤–µ—Ä —Å–æ–±–∞—á–µ–∫ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω...\n'
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —É –º–µ–Ω—è —Å–æ–±–∞—á–∫—É –ø–æ–∑–¥–Ω–µ–µ')
        bot.send_message(message.chat.id, text)
        bot.send_photo(message.chat.id, requests.get(sad_dog_url).content)
        logger.info('–§–æ—Ç–æ –≥—Ä—É—Å—Ç–Ω–æ–π —Å–æ–±–∞—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')


def main():
    try:
        logger.debug('–ö–æ—Ç–æ–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
        server.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
    except Exception as error:
        logger.critical(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {error}')


if __name__ == '__main__':
    main()
